import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC


"""
Realizacja projektu:
* Cezary Malejka
* Mateusz Grube

Projekt ma na celu przedstawienie działania biblioteki scikit learn w praktyce do analizy danych dotyczących skorupiaków z gatunku Abalone.

Instrukcja:
W celu uruchomienia projektu należy użyć komendy
python3 abalone.py
"""


"""
Function for getting the data from CSV file
:param datafile: route to a CSV file
:return: data
"""
def getData(datafile):
    data = np.genfromtxt(datafile, delimiter=",", dtype="str")
    return data

"""
Function to get data for X and Y axes
:param data: data generated by numpy function genfromtxt
:return: x and y values for training and testing
"""
def getXandY(data):
    x_init = data[:, :8]
    y_init = data[:, 8]

    d = pd.get_dummies(y_init)
    y = d.values.argmax(1)

    x1_init = x_init[:, 0]
    x1 = pd.get_dummies(x1_init).values

    x2_8 = x_init[:, 1:8]
    x = np.append(x1, x2_8, axis=1)

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.5)

    return x_train, y_train, x_test, y_test

"""
Function to generate singe SVC
:param kernel: kernel type
:param x_train: training data (x)
:param y_train: training data (y)
:return: SVC
"""
def generateSVCforKernel(kernel, x_train, y_train):
    return SVC(kernel=kernel).fit(x_train, y_train)


"""
Function to get predictions for three different Kernels
:param datafile: route to a CSV file
"""
def getPredForThreeKernels(datafile):
    data = getData(datafile)
    x_train, y_train, x_test, y_test = getXandY(data)
    poly_svc = generateSVCforKernel("poly", x_train, y_train)
    linear_svc = generateSVCforKernel("linear", x_train, y_train)
    svc = generateSVCforKernel("rbf", x_train, y_train)

    y_true, y_pred = y_test, svc.predict(x_test)
    poly_y_true, poly_y_pred = y_test, poly_svc.predict(x_test)
    lin_y_true, lin_y_pred = y_test, linear_svc.predict(x_test)

    print("RBF kernel: ", accuracy_score(y_true, y_pred))
    print("Polygon kernel: ", accuracy_score(poly_y_true, poly_y_pred))
    print("Linear kernel: ", accuracy_score(lin_y_true, lin_y_pred))


if __name__ == "__main__":
    getPredForThreeKernels("abalone.data")
